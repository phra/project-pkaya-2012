<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="lib_2asl_8c" kind="file">
    <compoundname>asl.c</compoundname>
    <includes refid="lib_2const_8h" local="yes">const.h</includes>
    <includes refid="lib_2u_m_p_stypes_8h" local="yes">uMPStypes.h</includes>
    <includes refid="lib_2listx_8h" local="yes">listx.h</includes>
    <includes refid="lib_2types11_8h" local="yes">types11.h</includes>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <incdepgraph>
      <node id="124">
        <label>listx.h</label>
        <link refid="lib_2listx_8h"/>
      </node>
      <node id="120">
        <label>C:/Users/phra/Desktop/progetto_so/src/lib/asl.c</label>
        <link refid="lib/asl.c"/>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>types11.h</label>
        <link refid="lib_2types11_8h"/>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>uMPStypes.h</label>
        <link refid="lib_2u_m_p_stypes_8h"/>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>base.h</label>
        <link refid="lib_2base_8h"/>
      </node>
      <node id="126">
        <label>utils.h</label>
        <link refid="utils_8h"/>
      </node>
      <node id="121">
        <label>const.h</label>
        <link refid="lib_2const_8h"/>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="lib_2asl_8c_1a285ae64e0dea6b13f94979f1cc7c382d" prot="public" static="no">
        <name>TRANSMITTED</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="8" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1a6f6489887e08bff4887d0bc5dcf214d8" prot="public" static="no">
        <name>ACK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="9" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1a5af38e3a7bc301757e367a04a3a8a96d" prot="public" static="no">
        <name>PRINTCHR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="10" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1aa1bf756391a9960a2445236428e08068" prot="public" static="no">
        <name>CHAROFFSET</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="11" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1a937dd9f9084a17618cdebdacad7299c7" prot="public" static="no">
        <name>STATUSMASK</name>
        <initializer>0xFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="12" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1afd7c9be68e62aa06f63ba025c13ee34a" prot="public" static="no">
        <name>TERM0ADDR</name>
        <initializer>0x10000250</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="13" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1a46c3d6184a0f7fe61df840f07e3e3a2f" prot="public" static="no">
        <name>DEVREGSIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="14" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1ad1235d5ce36f7267285e82dccd428aa6" prot="public" static="no">
        <name>READY</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="15" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1a6d290d1da702b40a5947ee63700f890e" prot="public" static="no">
        <name>DEVREGLEN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="16" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1ab5be0aaddb58ffb9cb20c12530d66316" prot="public" static="no">
        <name>BUSY</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="17" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1a444c52e2594d67f8801c17bf50491683" prot="public" static="no">
        <name>RECVSTATUS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="19" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1a7cc2c7f2230a13e65c1ef97ec2216b5d" prot="public" static="no">
        <name>RECVCOMMAND</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="20" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1ac74c3ef3346da1a7f0e5695f26981021" prot="public" static="no">
        <name>TRANSTATUS</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="21" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lib_2asl_8c_1ade5cf18f7c8b9f995f4d07fa5d8e7073" prot="public" static="no">
        <name>TRANCOMMAND</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="22" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lib_2asl_8c_1a7c5093a5a97c19cb85a352beda71e1b5" prot="public" static="no" mutable="no">
        <type><ref refid="structsemd__t" kindref="compound">semd_t</ref></type>
        <definition>semd_t semd_table[MAXPROC+MAX_DEVICES+1]</definition>
        <argsstring>[MAXPROC+MAX_DEVICES+1]</argsstring>
        <name>semd_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="24" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lib_2asl_8c_1afc0834df7c1a47ec6890b35bbaa74e0f" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref></type>
        <definition>struct list_head semdFree_h</definition>
        <argsstring></argsstring>
        <name>semdFree_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="25" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="lib_2asl_8c_1a43faf701af9530f6934df170370b8d94" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref></type>
        <definition>struct list_head semd_h</definition>
        <argsstring></argsstring>
        <name>semd_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="26" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lib_2asl_8c_1a37f5309d6814c22605b7da62eccc0f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initASL</definition>
        <argsstring>(void)</argsstring>
        <name>initASL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="lib_2asl_8c_1a37f5309d6814c22605b7da62eccc0f3a" kindref="member">initASL()</ref>:inizializza le due liste necessarie per la gestione dei semafori. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="36" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="lib_2asl_8c_1a7dd34e8ddc18c62f1253e9ddb657cb99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsemd__t" kindref="compound">semd_t</ref> *</type>
        <definition>semd_t* getSemd</definition>
        <argsstring>(int key)</argsstring>
        <name>getSemd</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore a semaforo) getSemd(id del semaforo): restituisce il puntatore al semaforo avente id=key della lista dei semafori attivi. se non esiste nessun elemento con tale id, restituisce NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>chiave del semaforo </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>puntatore al semaforo se attivo oppure NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="50" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="50" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="lib_2asl_8c_1aefbbb4412b9d14dc7745f72cb1e52d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsemd__t" kindref="compound">semd_t</ref> *</type>
        <definition>semd_t* mygetSemd</definition>
        <argsstring>(int key)</argsstring>
        <name>mygetSemd</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore a semaforo) mygetSemd(id del semaforo): restituisce il puntatore al semaforo avente id=key della lista dei semafori attivi. se non esiste nessun elemento con tale id, restituisce NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>chiave del semaforo </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>puntatore al semaforo, se non attivo lo alloca </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="67" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="67" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="lib_2asl_8c_1a8641466df0ac1ca496e0fd74a2564c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int insertBlocked</definition>
        <argsstring>(int key, pcb_t *p)</argsstring>
        <name>insertBlocked</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(1 TRUE oppure 0 FALSE) insertBlocked(id del semaforo, puntatore al processo): inserisce il processo puntato da p nella coda dei processi bloccati dal semaforo con id=key. se il semaforo non è presente, allora viene allocato un nuovo semaforo. in caso di errore restituisce 1, altrimenti 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>chiave del semaforo </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al processo da inserire </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 in caso di errore, 0 altrimenti </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="95" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="95" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="lib_2asl_8c_1a9cef24579d8726fc855feec0eb2ae6cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* removeBlocked</definition>
        <argsstring>(int key)</argsstring>
        <name>removeBlocked</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore al processo) removeBlocked(id del semaforo): ritorna il primo processo della coda associata al semaforo con id=key. se questo semaforo non esiste, restituisce NULL. se non ci sono più processi bloccati, sposta il semaforo nella lista dei semafori liberi <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>chiave del semaforo </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>puntatore al processo sbloccato </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="122" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="122" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="lib_2asl_8c_1a0726c34768ec59b5bfcb118bc2bb09f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* outBlocked</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>outBlocked</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore al processo) outBlocked(puntatore al processo): restituisce il processo puntato da p RIMUOVENDOLO dalla lista dei processi bloccati da un semaforo. se il processo non viene trovato, restituisce NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al processo </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>puntatore al processo </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="146" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="146" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="lib_2asl_8c_1aa01e6af434d18efb9280e801c9ac54fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* headBlocked</definition>
        <argsstring>(int key)</argsstring>
        <name>headBlocked</name>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore al processo) headBlocked(id del semaforo): restituisce il processo in testa SENZA RIMUOVERLO dalla lista dei processi bloccati dal semaforo con id=key. se il semaforo non viene trovato oppure se non ha processi in attesa, restituisce NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>chiave del semaforo </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>puntatore al processo </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="165" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="165" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="lib_2asl_8c_1af045446ae3e4b6b112ea15d2059c84cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void outChildBlocked</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>outChildBlocked</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>outChildBlocked(puntatore al processo): elimina il processo puntato da p dalla coda del semaforo associato, rimuovendo anche i processi discendenti. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al processo </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" line="179" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c" bodystart="179" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_2const_8h" kindref="compound">const.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_2u_m_p_stypes_8h" kindref="compound">uMPStypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_2listx_8h" kindref="compound">listx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_2types11_8h" kindref="compound">types11.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils_8h" kindref="compound">utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRANSMITTED<sp/>5</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ACK<sp/>1</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PRINTCHR<sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CHAROFFSET<sp/><sp/>8</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>STATUSMASK<sp/><sp/>0xFF</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TERM0ADDR<sp/><sp/><sp/>0x10000250</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEVREGSIZE<sp/>16<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>READY<sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEVREGLEN<sp/><sp/><sp/>4</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BUSY<sp/><sp/><sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RECVSTATUS<sp/>0</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RECVCOMMAND<sp/>1</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRANSTATUS<sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRANCOMMAND<sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="structsemd__t" kindref="compound">semd_t</ref><sp/><ref refid="lib_2asl_8c_1a7c5093a5a97c19cb85a352beda71e1b5" kindref="member">semd_table</ref>[<ref refid="lib_2const_8h_1abe4567498db286a3185a522c6dae3cbc" kindref="member">MAXPROC</ref>+<ref refid="lib_2const_8h_1a4e132cfaa78353e3af1474a86b2dd535" kindref="member">MAX_DEVICES</ref>+1];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref><sp/><ref refid="lib_2asl_8c_1afc0834df7c1a47ec6890b35bbaa74e0f" kindref="member">semdFree_h</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref><sp/><ref refid="lib_2asl_8c_1a43faf701af9530f6934df170370b8d94" kindref="member">semd_h</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>########################################################</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>#########<sp/><sp/>Funzioni<sp/>per<sp/>la<sp/>gestione<sp/>della<sp/>ASL<sp/><sp/>#########</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>########################################################</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_2asl_8c_1a37f5309d6814c22605b7da62eccc0f3a" kindref="member">initASL</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;<ref refid="lib_2asl_8c_1afc0834df7c1a47ec6890b35bbaa74e0f" kindref="member">semdFree_h</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;<ref refid="lib_2asl_8c_1a43faf701af9530f6934df170370b8d94" kindref="member">semd_h</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<ref refid="lib_2const_8h_1abe4567498db286a3185a522c6dae3cbc" kindref="member">MAXPROC</ref>+<ref refid="lib_2const_8h_1a4e132cfaa78353e3af1474a86b2dd535" kindref="member">MAX_DEVICES</ref>;i++<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add(&amp;semd_table[i].s_next,&amp;<ref refid="lib_2asl_8c_1afc0834df7c1a47ec6890b35bbaa74e0f" kindref="member">semdFree_h</ref>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="structsemd__t" kindref="compound">semd_t</ref>*<sp/><ref refid="lib_2asl_8c_1a7dd34e8ddc18c62f1253e9ddb657cb99" kindref="member">getSemd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemd__t" kindref="compound">semd_t</ref>*<sp/>item;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2listx_8h_1a9b782fefb5ab71ce9762182e45a615e1" kindref="member">list_for_each_entry</ref>(item,&amp;<ref refid="lib_2asl_8c_1a43faf701af9530f6934df170370b8d94" kindref="member">semd_h</ref>,s_next){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item-&gt;<ref refid="structsemd__t_1a2f9b394e0876b74e8f9e0a53c8aa7e0c" kindref="member">s_key</ref><sp/>==<sp/>key){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="structsemd__t" kindref="compound">semd_t</ref>*<sp/><ref refid="lib_2asl_8c_1aefbbb4412b9d14dc7745f72cb1e52d2b" kindref="member">mygetSemd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemd__t" kindref="compound">semd_t</ref>*<sp/>item;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>l_next;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2listx_8h_1a9b782fefb5ab71ce9762182e45a615e1" kindref="member">list_for_each_entry</ref>(item,&amp;<ref refid="lib_2asl_8c_1a43faf701af9530f6934df170370b8d94" kindref="member">semd_h</ref>,s_next){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item-&gt;<ref refid="structsemd__t_1a2f9b394e0876b74e8f9e0a53c8aa7e0c" kindref="member">s_key</ref><sp/>==<sp/>key){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>l_next<sp/>=<sp/>list_next(&amp;<ref refid="lib_2asl_8c_1afc0834df7c1a47ec6890b35bbaa74e0f" kindref="member">semdFree_h</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>list_del(l_next);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add(l_next,&amp;<ref refid="lib_2asl_8c_1a43faf701af9530f6934df170370b8d94" kindref="member">semd_h</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>item=<ref refid="lib_2listx_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(l_next,<ref refid="structsemd__t" kindref="compound">semd_t</ref>,s_next);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structsemd__t_1a2f9b394e0876b74e8f9e0a53c8aa7e0c" kindref="member">s_key</ref><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structsemd__t_1a104d7150b55e51644df16fdc9814191f" kindref="member">s_value</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;item-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2asl_8c_1a8641466df0ac1ca496e0fd74a2564c76" kindref="member">insertBlocked</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*<ref refid="p1test__pkaya__v1_81_8c_1a3bec781e4e77d9931af780e1605d7d94" kindref="member">p</ref>){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemd__t" kindref="compound">semd_t</ref>*<sp/>semd_found<sp/>=<sp/><ref refid="lib_2asl_8c_1aefbbb4412b9d14dc7745f72cb1e52d2b" kindref="member">mygetSemd</ref>(key);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>l_next;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(semd_found){</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structpcb__t_1a831f803a73e91f4b1530e60bc24e92b4" kindref="member">p_semkey</ref><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(&amp;p-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>,&amp;semd_found-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2const_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(list_empty(&amp;<ref refid="lib_2asl_8c_1afc0834df7c1a47ec6890b35bbaa74e0f" kindref="member">semdFree_h</ref>))</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2const_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>l_next<sp/>=<sp/>list_next(&amp;<ref refid="lib_2asl_8c_1afc0834df7c1a47ec6890b35bbaa74e0f" kindref="member">semdFree_h</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>list_del(l_next);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add(l_next,&amp;<ref refid="lib_2asl_8c_1a43faf701af9530f6934df170370b8d94" kindref="member">semd_h</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>semd_found=<ref refid="lib_2listx_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(l_next,<ref refid="structsemd__t" kindref="compound">semd_t</ref>,s_next);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>semd_found-&gt;<ref refid="structsemd__t_1a2f9b394e0876b74e8f9e0a53c8aa7e0c" kindref="member">s_key</ref><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;semd_found-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structpcb__t_1a831f803a73e91f4b1530e60bc24e92b4" kindref="member">p_semkey</ref><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;p-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>,&amp;semd_found-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2const_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="lib_2asl_8c_1a9cef24579d8726fc855feec0eb2ae6cf" kindref="member">removeBlocked</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemd__t" kindref="compound">semd_t</ref>*<sp/>semd_found<sp/>=<sp/><ref refid="lib_2asl_8c_1a7dd34e8ddc18c62f1253e9ddb657cb99" kindref="member">getSemd</ref>(key);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>first_pcb;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>l_next;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!semd_found)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>l_next<sp/>=<sp/>list_next(&amp;semd_found-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>first_pcb=<ref refid="lib_2listx_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(l_next,<ref refid="structpcb__t" kindref="compound">pcb_t</ref>,p_next);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>list_del(l_next);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(list_empty(&amp;semd_found-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>)){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;semd_found-&gt;<ref refid="structsemd__t_1a09cdbeceec30846f32399900706a408f" kindref="member">s_next</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add(&amp;semd_found-&gt;<ref refid="structsemd__t_1a09cdbeceec30846f32399900706a408f" kindref="member">s_next</ref>,&amp;<ref refid="lib_2asl_8c_1afc0834df7c1a47ec6890b35bbaa74e0f" kindref="member">semdFree_h</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>first_pcb-&gt;<ref refid="structpcb__t_1a831f803a73e91f4b1530e60bc24e92b4" kindref="member">p_semkey</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first_pcb;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="lib_2asl_8c_1a0726c34768ec59b5bfcb118bc2bb09f8" kindref="member">outBlocked</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemd__t" kindref="compound">semd_t</ref>*<sp/>semd_found<sp/>=<sp/><ref refid="lib_2asl_8c_1a7dd34e8ddc18c62f1253e9ddb657cb99" kindref="member">getSemd</ref>(p-&gt;<ref refid="structpcb__t_1a831f803a73e91f4b1530e60bc24e92b4" kindref="member">p_semkey</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>item;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2listx_8h_1a9b782fefb5ab71ce9762182e45a615e1" kindref="member">list_for_each_entry</ref>(item,&amp;semd_found-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>,p_next){</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>==<sp/>item){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;item-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structpcb__t_1a831f803a73e91f4b1530e60bc24e92b4" kindref="member">p_semkey</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structpcb__t_1a831f803a73e91f4b1530e60bc24e92b4" kindref="member">p_semkey</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="lib_2asl_8c_1aa01e6af434d18efb9280e801c9ac54fd" kindref="member">headBlocked</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key){</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsemd__t" kindref="compound">semd_t</ref>*<sp/>semd_found<sp/>=<sp/><ref refid="lib_2asl_8c_1a7dd34e8ddc18c62f1253e9ddb657cb99" kindref="member">getSemd</ref>(key);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>l_next;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*controlla<sp/>le<sp/>due<sp/>condizioni<sp/>di<sp/>fallimento*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((!semd_found)<sp/>||<sp/>list_empty(&amp;semd_found-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>))<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>l_next<sp/>=<sp/>list_next(&amp;semd_found-&gt;<ref refid="structsemd__t_1a9a531117316667eceb70495342c36be1" kindref="member">s_procQ</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lib_2listx_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(l_next,<ref refid="structpcb__t" kindref="compound">pcb_t</ref>,p_next);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lib_2asl_8c_1af045446ae3e4b6b112ea15d2059c84cd" kindref="member">outChildBlocked</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p){</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>item;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!list_empty(&amp;p-&gt;p_child)){</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*chiamata<sp/>ricorsiva<sp/>per<sp/>ogni<sp/>figlio*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2listx_8h_1a9b782fefb5ab71ce9762182e45a615e1" kindref="member">list_for_each_entry</ref>(item,&amp;p-&gt;p_child,p_sib){</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lib_2asl_8c_1af045446ae3e4b6b112ea15d2059c84cd" kindref="member">outChildBlocked</ref>(item);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*visita<sp/>posticipata,<sp/>quando<sp/>si<sp/>arriva<sp/>qua<sp/>i<sp/>discendenti<sp/>di<sp/>p<sp/>sono<sp/>già<sp/>stati<sp/>eliminati*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2asl_8c_1a0726c34768ec59b5bfcb118bc2bb09f8" kindref="member">outBlocked</ref>(p);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="C:/Users/phra/Desktop/progetto_so/src/lib/asl.c"/>
  </compounddef>
</doxygen>
