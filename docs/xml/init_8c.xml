<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="init_8c" kind="file">
    <compoundname>init.c</compoundname>
    <includes refid="const_8h" local="yes">lib/const.h</includes>
    <includes refid="base_8h" local="yes">lib/base.h</includes>
    <includes refid="u_m_p_stypes_8h" local="yes">lib/uMPStypes.h</includes>
    <includes refid="libumps_8h" local="yes">lib/libumps.h</includes>
    <includes refid="listx_8h" local="yes">lib/listx.h</includes>
    <includes refid="types11_8h" local="yes">lib/types11.h</includes>
    <includes refid="pcb_8h" local="yes">lib/pcb.h</includes>
    <includes refid="asl_8h" local="yes">lib/asl.h</includes>
    <includes refid="utils_8h" local="yes">lib/utils.h</includes>
    <includes refid="scheduler_8h" local="yes">scheduler.h</includes>
    <includes refid="exception_8h" local="yes">exception.h</includes>
    <includes refid="syscall_8h" local="yes">syscall.h</includes>
    <includes refid="interrupt_8h" local="yes">interrupt.h</includes>
    <incdepgraph>
      <node id="45">
        <label>lib/listx.h</label>
        <link refid="listx_8h"/>
      </node>
      <node id="48">
        <label>lib/asl.h</label>
        <link refid="asl_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>lib/types11.h</label>
        <link refid="types11_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>exception.h</label>
        <link refid="exception_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>lib/libumps.h</label>
        <link refid="libumps_8h"/>
      </node>
      <node id="50">
        <label>scheduler.h</label>
        <link refid="scheduler_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>C:/Users/phra/Desktop/progetto_so/src/init.c</label>
        <link refid="init.c"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>lib/uMPStypes.h</label>
        <link refid="u_m_p_stypes_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>lib/pcb.h</label>
        <link refid="pcb_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>base.h</label>
        <link refid="base_8h"/>
      </node>
      <node id="49">
        <label>lib/utils.h</label>
        <link refid="utils_8h"/>
      </node>
      <node id="41">
        <label>lib/const.h</label>
        <link refid="const_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="init_8c_1a69b8d39be10ca914356df47dece51d4d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>processCounter</definition>
        <argsstring></argsstring>
        <name>processCounter</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>contatore dei processi </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="114" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1ad318e0d6e55bda844999a756a010d6ad" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>softBlockCounter</definition>
        <argsstring></argsstring>
        <name>softBlockCounter</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Contatore processi bloccati per I/O. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="120" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1ad0b360b54c065def8f306dd38587add6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>usedpid</definition>
        <argsstring></argsstring>
        <name>usedpid</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Per tenere conto dei pid assegnati. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="126" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1ab13508b903f28c9e7d10840b2451367c" prot="public" static="no" mutable="no">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>currentproc</definition>
        <argsstring>[MAXCPUs]</argsstring>
        <name>currentproc</name>
        <briefdescription>
<para>Puntatori ai processi attualmente in esecuzione. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="132" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1ae30a58778136e047f76089ffa33a5108" prot="public" static="no" mutable="no">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>PIDs</definition>
        <argsstring>[MAXPID]</argsstring>
        <name>PIDs</name>
        <briefdescription>
<para>un array per tenere conto dei pid assegnati, null se è libero, altrimenti l&apos;indirizzo del pcb </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="138" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1a58f4b53b4c0a64c0f4638954abea960b" prot="public" static="no" mutable="no">
        <type><ref refid="structstate__t" kindref="compound">state_t</ref> *</type>
        <definition>new_old_areas</definition>
        <argsstring>[MAXCPUs][8]</argsstring>
        <name>new_old_areas</name>
        <briefdescription>
<para>Tabella generale per le new/old areas, in modo da avere un&apos;unica tabella per tutti i processori. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="144" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1a0ee87a1f66854fadca96c35ba49a43cd" prot="public" static="no" mutable="no">
        <type><ref refid="structstate__t" kindref="compound">state_t</ref></type>
        <definition>real_new_old_areas</definition>
        <argsstring>[MAXCPUs-1][8]</argsstring>
        <name>real_new_old_areas</name>
        <briefdescription>
<para>new/old area reali dei processori 1..n che le hanno sullo stack </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="150" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1a8327c9ced3c94e6a4747295c57b5ca6e" prot="public" static="no" mutable="no">
        <type><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref></type>
        <definition>mutex_semaphoreprova</definition>
        <argsstring></argsstring>
        <name>mutex_semaphoreprova</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>mutex per accedere ai semafori </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="156" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1a5a26a9c5982056efa1de6e7e834a753b" prot="public" static="no" mutable="no">
        <type><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref></type>
        <definition>mutex_scheduler</definition>
        <argsstring></argsstring>
        <name>mutex_scheduler</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>mutex per accedere allo scheduler, process counter e code dei processi </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="162" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1adb069d27d0e8108916723b0efbfdd791" prot="public" static="no" mutable="no">
        <type><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref></type>
        <definition>mutex_wait_clock</definition>
        <argsstring></argsstring>
        <name>mutex_wait_clock</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>mutex per accedere al softBlockCounter </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="168" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="168" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="init_8c_1a6a0c937f22f4f8e2d7c8223fd92f1e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref></type>
        <definition>U32 mytermstat</definition>
        <argsstring>(memaddr *stataddr)</argsstring>
        <name>mytermstat</name>
        <param>
          <type><ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref> *</type>
          <declname>stataddr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="18" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a4bfe35af00daa0de1d426f484ab4f533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int mytermprint</definition>
        <argsstring>(char *str, unsigned int term)</argsstring>
        <name>mytermprint</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="24" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="24" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void myprint</definition>
        <argsstring>(char *str1)</argsstring>
        <name>myprint</name>
        <param>
          <type>char *</type>
          <declname>str1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="65" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a9bbf90d0109753b6667a357315156d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void myprintint</definition>
        <argsstring>(char *str1, int numero)</argsstring>
        <name>myprintint</name>
        <param>
          <type>char *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="72" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="72" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a91fcd5c68a8b0ccf94d0167fe1b4e8f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void myprintbin</definition>
        <argsstring>(char *str1, int numero)</argsstring>
        <name>myprintbin</name>
        <param>
          <type>char *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="82" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a37123e336d19f111e111d2baebb40898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void myprinthex</definition>
        <argsstring>(char *str1, int numero)</argsstring>
        <name>myprinthex</name>
        <param>
          <type>char *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="92" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="92" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a7e50c32ff34e340cf6a55068981c5d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sleep</definition>
        <argsstring>(int count)</argsstring>
        <name>sleep</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="102" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1ae1a3968e7947464bee7714f6d43b7002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test</definition>
        <argsstring>()</argsstring>
        <name>test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="171" bodyfile="C:/Users/phra/Desktop/progetto_so/src/p2test2012_scalability_v1.0.c" bodystart="147" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a439fcb2ec5f0ed3a4f755c6ca069ed55" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void initCurrentProcs</definition>
        <argsstring>(void)</argsstring>
        <name>initCurrentProcs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare l&apos;array dei processi correnti </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="176" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a9f16323f92950106e59f08a026ba66a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void initSemaphoreASL</definition>
        <argsstring>(int value)</argsstring>
        <name>initSemaphoreASL</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare i semafori dell&apos;ASL <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>valore a cui inizializzare i semafori </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="184" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1af30fd743702a50263c2a2eb3bac79c8e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void initDevStatus</definition>
        <argsstring>(void)</argsstring>
        <name>initDevStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare la tabella per gestire gli interrupt </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="195" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1ae16e2886db159c31e260e3ce908121d5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void initSchedQueue</definition>
        <argsstring>(void)</argsstring>
        <name>initSchedQueue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare le code dello scheduler </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="202" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a980f5b4e51111dc071b5e923e4935da6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void initPIDs</definition>
        <argsstring>()</argsstring>
        <name>initPIDs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare i pid </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="210" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1abc9251e32fa3b70cbd696af7a6c62b44" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initNewArea</definition>
        <argsstring>(memaddr handler, state_t *addr, int numcpu)</argsstring>
        <name>initNewArea</name>
        <param>
          <type><ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="structstate__t" kindref="compound">state_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare le new areas <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>indirizzo della funzione da eseguire </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>indirizzo della new area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcpu</parametername>
</parameternamelist>
<parameterdescription>
<para>indice del processore Bisogna settare i bit precedenti IE/KU/VM nella new area, poiché la LDST fa una pop su questi bit </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="221" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="221" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a6b991d1f9d8ffa01669372f3c2bce39e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initTest</definition>
        <argsstring>(state_t *addr)</argsstring>
        <name>initTest</name>
        <param>
          <type><ref refid="structstate__t" kindref="compound">state_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare lo stato del Test <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>indirizzo dello state del test </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="244" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="244" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1ab49d80a4441122be9cbae0d994cad783" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initNewOldAreas</definition>
        <argsstring>(void)</argsstring>
        <name>initNewOldAreas</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare le new/old areas </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="267" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="267" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a6904a88ba2e03274b4d832b24789dd52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initCpuStates</definition>
        <argsstring>(state_t *addr, int i)</argsstring>
        <name>initCpuStates</name>
        <param>
          <type><ref refid="structstate__t" kindref="compound">state_t</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare lo stato della CPU <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>indirizzo dello stato da inizializzare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>numero del processore </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="300" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="300" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1ac58f7e616049a790d2d79c0fde33269e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initCPUs</definition>
        <argsstring>(void)</argsstring>
        <name>initCPUs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>funzione per inizializzare le CPU </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="312" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="312" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Entry point dal Kernel <simplesect kind="return"><para>0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/init.c" line="326" bodyfile="C:/Users/phra/Desktop/progetto_so/src/init.c" bodystart="325" bodyend="354"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="const_8h" kindref="compound">lib/const.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_8h" kindref="compound">lib/base.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="u_m_p_stypes_8h" kindref="compound">lib/uMPStypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libumps_8h" kindref="compound">lib/libumps.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="listx_8h" kindref="compound">lib/listx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types11_8h" kindref="compound">lib/types11.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pcb_8h" kindref="compound">lib/pcb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="asl_8h" kindref="compound">lib/asl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils_8h" kindref="compound">lib/utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scheduler_8h" kindref="compound">scheduler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exception_8h" kindref="compound">exception.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="syscall_8h" kindref="compound">syscall.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interrupt_8h" kindref="compound">interrupt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*DEBUG*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref><sp/><ref refid="init_8c_1a6a0c937f22f4f8e2d7c8223fd92f1e0c" kindref="member">mytermstat</ref>(<ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref><sp/>*stataddr)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((*stataddr)<sp/>&amp;<sp/><ref refid="init_8h_1a937dd9f9084a17618cdebdacad7299c7" kindref="member">STATUSMASK</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>prints<sp/>a<sp/>string<sp/>on<sp/>specified<sp/>terminal<sp/>and<sp/>returns<sp/>TRUE<sp/>if<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>print<sp/>was<sp/>successful,<sp/>FALSE<sp/>if<sp/>not<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="init_8c_1a4bfe35af00daa0de1d426f484ab4f533" kindref="member">mytermprint</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>term)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref><sp/>*statusp;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref><sp/>*commandp;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref><sp/>stat;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref><sp/>cmd;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error<sp/>=<sp/><ref refid="const_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(term<sp/>&lt;<sp/><ref refid="const_8h_1ac488a197b10aaecb90e1c57b17d56e64" kindref="member">DEV_PER_INT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>terminal<sp/>is<sp/>correct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>device<sp/>register<sp/>field<sp/>addresses<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statusp<sp/>=<sp/>(<ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref><sp/>*)<sp/>(<ref refid="init_8h_1afd7c9be68e62aa06f63ba025c13ee34a" kindref="member">TERM0ADDR</ref><sp/>+<sp/>(term<sp/>*<sp/><ref refid="init_8h_1a46c3d6184a0f7fe61df840f07e3e3a2f" kindref="member">DEVREGSIZE</ref>)<sp/>+<sp/>(<ref refid="init_8h_1ac74c3ef3346da1a7f0e5695f26981021" kindref="member">TRANSTATUS</ref><sp/>*<sp/><ref refid="init_8h_1a6d290d1da702b40a5947ee63700f890e" kindref="member">DEVREGLEN</ref>));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandp<sp/>=<sp/>(<ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref><sp/>*)<sp/>(<ref refid="init_8h_1afd7c9be68e62aa06f63ba025c13ee34a" kindref="member">TERM0ADDR</ref><sp/>+<sp/>(term<sp/>*<sp/>DEVREGSIZE)<sp/>+<sp/>(<ref refid="init_8h_1ade5cf18f7c8b9f995f4d07fa5d8e7073" kindref="member">TRANCOMMAND</ref><sp/>*<sp/><ref refid="init_8h_1a6d290d1da702b40a5947ee63700f890e" kindref="member">DEVREGLEN</ref>));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>test<sp/>device<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>=<sp/><ref refid="init_8c_1a6a0c937f22f4f8e2d7c8223fd92f1e0c" kindref="member">mytermstat</ref>(statusp);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((stat<sp/>==<sp/><ref refid="init_8h_1ad1235d5ce36f7267285e82dccd428aa6" kindref="member">READY</ref>)<sp/>||<sp/>(stat<sp/>==<sp/><ref refid="init_8h_1a285ae64e0dea6b13f94979f1cc7c382d" kindref="member">TRANSMITTED</ref>))<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>device<sp/>is<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>print<sp/>cycle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(!error))<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>(*str<sp/>&lt;&lt;<sp/><ref refid="init_8h_1aa1bf756391a9960a2445236428e08068" kindref="member">CHAROFFSET</ref>)<sp/>|<sp/><ref refid="init_8h_1a5af38e3a7bc301757e367a04a3a8a96d" kindref="member">PRINTCHR</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*commandp<sp/>=<sp/>cmd;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>busy<sp/>waiting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((stat<sp/>=<sp/><ref refid="init_8c_1a6a0c937f22f4f8e2d7c8223fd92f1e0c" kindref="member">mytermstat</ref>(statusp))<sp/>==<sp/><ref refid="init_8h_1ab5be0aaddb58ffb9cb20c12530d66316" kindref="member">BUSY</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>wait<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat<sp/>!=<sp/><ref refid="init_8h_1a285ae64e0dea6b13f94979f1cc7c382d" kindref="member">TRANSMITTED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/><ref refid="const_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>move<sp/>to<sp/>next<sp/>char<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str++;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>device<sp/>is<sp/>not<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/><ref refid="const_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wrong<sp/>terminal<sp/>device<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/><ref refid="const_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!error);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str1){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output[<ref refid="init_8h_1a63c62a284d91c978cc80ca559c223e07" kindref="member">MAXPRINT</ref>];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8c_1af9af30bd4e6b10d1560aabd834144e33" kindref="member">strcpy</ref>(output,<sp/>str1);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a4bfe35af00daa0de1d426f484ab4f533" kindref="member">mytermprint</ref>(output,0);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init_8c_1a9bbf90d0109753b6667a357315156d7c" kindref="member">myprintint</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numero){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>intero[30];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(str1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8c_1a0338f8f78dbf81dc70849a16e3ec22bb" kindref="member">itoa</ref>(numero,intero,10);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(intero);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init_8c_1a91fcd5c68a8b0ccf94d0167fe1b4e8f6" kindref="member">myprintbin</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numero){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>intero[64];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(str1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8c_1a0338f8f78dbf81dc70849a16e3ec22bb" kindref="member">itoa</ref>(numero,intero,2);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(intero);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init_8c_1a37123e336d19f111e111d2baebb40898" kindref="member">myprinthex</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numero){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>intero[64];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(str1);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>0x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils_8c_1a0338f8f78dbf81dc70849a16e3ec22bb" kindref="member">itoa</ref>(numero,intero,16);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(intero);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8c_1a3dff7a7ddb7b31f1a3f84462906b78e3" kindref="member">myprint</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init_8c_1a7e50c32ff34e340cf6a55068981c5d22" kindref="member">sleep</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;i&lt;count;i++);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*END<sp/>DEBUG*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*Inizializzazione<sp/>variabili<sp/>del<sp/>kernel*/</highlight></codeline>
<codeline lineno="114"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="init_8c_1a69b8d39be10ca914356df47dece51d4d" kindref="member" tooltip="contatore dei processi">processCounter</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>Contatore<sp/>processi<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="init_8c_1ad318e0d6e55bda844999a756a010d6ad" kindref="member" tooltip="Contatore processi bloccati per I/O.">softBlockCounter</ref><sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Contatore<sp/>processi<sp/>bloccati<sp/>per<sp/>I/O<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="init_8c_1ad0b360b54c065def8f306dd38587add6" kindref="member" tooltip="Per tenere conto dei pid assegnati.">usedpid</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="init_8c_1ab13508b903f28c9e7d10840b2451367c" kindref="member" tooltip="Puntatori ai processi attualmente in esecuzione.">currentproc</ref>[<ref refid="init_8h_1abc16f63a572f5b4de9617288fc7c9559" kindref="member">MAXCPUs</ref>];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="init_8c_1ae30a58778136e047f76089ffa33a5108" kindref="member" tooltip="un array per tenere conto dei pid assegnati, null se è libero, altrimenti l&amp;#39;indirizzo del pcb...">PIDs</ref>[<ref refid="init_8h_1a9b896b5481b8e7b305a5ea99a0d3554c" kindref="member">MAXPID</ref>];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>un<sp/>array<sp/>di<sp/>processi,<sp/>0<sp/>se<sp/>e<sp/>libero,<sp/>altrimenti<sp/>l&apos;indirizzo<sp/>del<sp/>pcb*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="structstate__t" kindref="compound">state_t</ref>*<sp/><ref refid="init_8c_1a58f4b53b4c0a64c0f4638954abea960b" kindref="member" tooltip="Tabella generale per le new/old areas, in modo da avere un&amp;#39;unica tabella per tutti i processori...">new_old_areas</ref>[<ref refid="init_8h_1abc16f63a572f5b4de9617288fc7c9559" kindref="member">MAXCPUs</ref>][8];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="structstate__t" kindref="compound">state_t</ref><sp/><ref refid="init_8c_1a0ee87a1f66854fadca96c35ba49a43cd" kindref="member" tooltip="new/old area reali dei processori 1..n che le hanno sullo stack">real_new_old_areas</ref>[<ref refid="init_8h_1abc16f63a572f5b4de9617288fc7c9559" kindref="member">MAXCPUs</ref>-1][8];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref><sp/><ref refid="init_8c_1a8327c9ced3c94e6a4747295c57b5ca6e" kindref="member" tooltip="mutex per accedere ai semafori">mutex_semaphoreprova</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref><sp/><ref refid="init_8c_1a5a26a9c5982056efa1de6e7e834a753b" kindref="member" tooltip="mutex per accedere allo scheduler, process counter e code dei processi">mutex_scheduler</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref><sp/><ref refid="init_8c_1adb069d27d0e8108916723b0efbfdd791" kindref="member" tooltip="mutex per accedere al softBlockCounter">mutex_wait_clock</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="init_8c_1ae1a3968e7947464bee7714f6d43b7002" kindref="member">test</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initCurrentProcs(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils_8c_1aa7439c3a4d37f53dcb946c7616592cf4" kindref="member">memset</ref>(currentproc,0,<ref refid="init_8h_1abc16f63a572f5b4de9617288fc7c9559" kindref="member">MAXCPUs</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcb__t" kindref="compound">pcb_t</ref>*));</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initSemaphoreASL(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;i&lt;<ref refid="const_8h_1abe4567498db286a3185a522c6dae3cbc" kindref="member">MAXPROC</ref>+<ref refid="const_8h_1a4e132cfaa78353e3af1474a86b2dd535" kindref="member">MAX_DEVICES</ref>;i++){</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asl_8c_1a7c5093a5a97c19cb85a352beda71e1b5" kindref="member">semd_table</ref>[i].<ref refid="structsemd__t_1a104d7150b55e51644df16fdc9814191f" kindref="member">s_value</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="asl_8c_1a7c5093a5a97c19cb85a352beda71e1b5" kindref="member">semd_table</ref>[i].<ref refid="structsemd__t_1a2f9b394e0876b74e8f9e0a53c8aa7e0c" kindref="member">s_key</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initDevStatus(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils_8c_1aa7439c3a4d37f53dcb946c7616592cf4" kindref="member">memset</ref>(<ref refid="interrupt_8c_1a8f2e0ef78869dd8b660ad9678826efda" kindref="member" tooltip="matrice per la gestione degli interrupt">devstatus</ref>,0,<ref refid="const_8h_1a58475cf2c6fec61240a581b4cb795e9f" kindref="member">DEV_USED_INTS</ref>*<ref refid="const_8h_1ac488a197b10aaecb90e1c57b17d56e64" kindref="member">DEV_PER_INT</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="base_8h_1ac3df7cf3c8cb172a588adec881447d68" kindref="member">U32</ref>));</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initSchedQueue(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(<ref refid="scheduler_8c_1a8d081d17201033e370076493cb36fc77" kindref="member">readyQ</ref>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(<ref refid="scheduler_8c_1a2cb62a5efc6bb08dd921a93b1042484e" kindref="member">expiredQ</ref>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initPIDs(){</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils_8c_1aa7439c3a4d37f53dcb946c7616592cf4" kindref="member">memset</ref>(PIDs,0,<ref refid="init_8h_1a9b896b5481b8e7b305a5ea99a0d3554c" kindref="member">MAXPID</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcb__t" kindref="compound">pcb_t</ref>*));</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initNewArea(<ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref><sp/>handler,<sp/><ref refid="structstate__t" kindref="compound">state_t</ref>*<sp/>addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numcpu){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstate__t" kindref="compound">state_t</ref>*<sp/>state<sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils_8c_1aa7439c3a4d37f53dcb946c7616592cf4" kindref="member">memset</ref>(state,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structstate__t" kindref="compound">state_t</ref>));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a8d0d0af423396f882ca23f2b8c47e4da" kindref="member">STATUS_IEc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupt<sp/>non<sp/>abilitati<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1ac7e4378f034ec46f403ba6c5b4336dc3" kindref="member">STATUS_IEp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>also<sp/>previous<sp/>bit<sp/>for<sp/>LDST()<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a2fec7ab5c5b847bbcce98d5206040568" kindref="member">STATUS_IEo</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1ab01ef032dcd10746f9741e50d02cbebb" kindref="member">STATUS_INT_UNMASKED</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a3b3836dddfb0caf0cf88c797fe74bc08" kindref="member">STATUS_VMc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Virtual<sp/>Memory<sp/>OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a1201cd50b5e7b398ebf37522bbf41653" kindref="member">STATUS_VMp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>also<sp/>previous<sp/>bit<sp/>for<sp/>LDST()<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a4eb78d59507801e34cad124f27c4b773" kindref="member">STATUS_VMo</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a1e046d5b0ce22c1223cb54f7b8735cec" kindref="member">STATUS_KUc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Kernel-Mode<sp/>ON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1aef7ac29581473a7572744e8e36fc5335" kindref="member">STATUS_KUp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>also<sp/>previous<sp/>bit<sp/>for<sp/>LDST()<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a0a5cc573c0036dfb0034cb6277a0e468" kindref="member">STATUS_KUo</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structstate__t_1ae37efb991e613c0dc476ece5ed4ffa71" kindref="member">status</ref><sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;reg_sp<sp/>=<sp/><ref refid="const_8h_1aece40125a4bf69bdb1823da3d199f2f6" kindref="member">RAMTOP</ref><sp/>-<sp/>numcpu*<ref refid="const_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member">PAGE_SIZE</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structstate__t_1ac0cfee10c7a13bb3749604cd15892217" kindref="member">pc_epc</ref><sp/>=<sp/>state-&gt;reg_t9<sp/>=<sp/>handler;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initTest(<ref refid="structstate__t" kindref="compound">state_t</ref>*<sp/>addr){</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstate__t" kindref="compound">state_t</ref>*<sp/>state<sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils_8c_1aa7439c3a4d37f53dcb946c7616592cf4" kindref="member">memset</ref>(state,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structstate__t" kindref="compound">state_t</ref>));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>|=<sp/><ref refid="const_8h_1a8d0d0af423396f882ca23f2b8c47e4da" kindref="member">STATUS_IEc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupt<sp/>abilitati<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>|=<sp/><ref refid="const_8h_1ac7e4378f034ec46f403ba6c5b4336dc3" kindref="member">STATUS_IEp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>also<sp/>previous<sp/>bit<sp/>for<sp/>LDST()<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>|=<sp/><ref refid="const_8h_1a2fec7ab5c5b847bbcce98d5206040568" kindref="member">STATUS_IEo</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>|=<sp/><ref refid="const_8h_1ab01ef032dcd10746f9741e50d02cbebb" kindref="member">STATUS_INT_UNMASKED</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a3b3836dddfb0caf0cf88c797fe74bc08" kindref="member">STATUS_VMc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Virtual<sp/>Memory<sp/>OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a1201cd50b5e7b398ebf37522bbf41653" kindref="member">STATUS_VMp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>also<sp/>previous<sp/>bit<sp/>for<sp/>LDST()<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a4eb78d59507801e34cad124f27c4b773" kindref="member">STATUS_VMo</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a1e046d5b0ce22c1223cb54f7b8735cec" kindref="member">STATUS_KUc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Kernel-Mode<sp/>ON<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1aef7ac29581473a7572744e8e36fc5335" kindref="member">STATUS_KUp</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>also<sp/>previous<sp/>bit<sp/>for<sp/>LDST()<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>&amp;=<sp/>~<ref refid="const_8h_1a0a5cc573c0036dfb0034cb6277a0e468" kindref="member">STATUS_KUo</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>|=<sp/><ref refid="const_8h_1ad4cd204cc4a604897e6bec80af274cf9" kindref="member">STATUS_PLT</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structstate__t_1ae37efb991e613c0dc476ece5ed4ffa71" kindref="member">status</ref><sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;reg_sp<sp/>=<sp/><ref refid="const_8h_1aece40125a4bf69bdb1823da3d199f2f6" kindref="member">RAMTOP</ref><sp/>-<sp/>(<ref refid="init_8h_1abc16f63a572f5b4de9617288fc7c9559" kindref="member">MAXCPUs</ref>+1)*<ref refid="const_8h_1af9b1b2ba12857a4bf11289dac8c5462d" kindref="member">FRAME_SIZE</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>$SP<sp/>=<sp/>RAMPTOP<sp/>-<sp/>FRAMESIZE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structstate__t_1ac0cfee10c7a13bb3749604cd15892217" kindref="member">pc_epc</ref><sp/>=<sp/>state-&gt;reg_t9<sp/>=<sp/>(<ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref>)<ref refid="init_8c_1ae1a3968e7947464bee7714f6d43b7002" kindref="member">test</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initNewOldAreas(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>new_old_areas[0][<ref refid="init_8h_1adf0526200120de69a5faac212ae1e0c5" kindref="member">INT_OLD</ref>]<sp/>=<sp/>(<ref refid="structstate__t" kindref="compound">state_t</ref>*)<ref refid="const_8h_1a67d4fabb12bd55cc2ff69b783825285b" kindref="member">INT_OLDAREA</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>new_old_areas[0][<ref refid="init_8h_1a1c70b67aa8a2da0db1ad44ef72a2f050" kindref="member">INT_NEW</ref>]<sp/>=<sp/>(<ref refid="structstate__t" kindref="compound">state_t</ref>*)<ref refid="const_8h_1a165d58183bfd70b348651a00e3876b4b" kindref="member">INT_NEWAREA</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>new_old_areas[0][<ref refid="init_8h_1a09276c76a19689cebfd74dd3846e9f38" kindref="member">TLB_OLD</ref>]<sp/>=<sp/>(<ref refid="structstate__t" kindref="compound">state_t</ref>*)<ref refid="const_8h_1a5d4b27d0155e892ebf631914ff824f40" kindref="member">TLB_OLDAREA</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>new_old_areas[0][<ref refid="init_8h_1ac80e3cb5a610919db7a4c96d73b6c5a3" kindref="member">TLB_NEW</ref>]<sp/>=<sp/>(<ref refid="structstate__t" kindref="compound">state_t</ref>*)<ref refid="const_8h_1ae9085df9671391c53fe7893ee3f884df" kindref="member">TLB_NEWAREA</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>new_old_areas[0][<ref refid="init_8h_1a00eb3e886ed75bb0469c878c16ac3f0c" kindref="member">PGMTRAP_OLD</ref>]<sp/>=<sp/>(<ref refid="structstate__t" kindref="compound">state_t</ref>*)<ref refid="const_8h_1ab58e9368f30d392e392430947edc5dd5" kindref="member">PGMTRAP_OLDAREA</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>new_old_areas[0][<ref refid="init_8h_1aa8385e9f72c50f39525b45dba68596d9" kindref="member">PGMTRAP_NEW</ref>]<sp/>=<sp/>(<ref refid="structstate__t" kindref="compound">state_t</ref>*)<ref refid="const_8h_1afd7d1fdb609b0ed8ecaf547ae30de9f3" kindref="member">PGMTRAP_NEWAREA</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>new_old_areas[0][<ref refid="init_8h_1a78d7439f7d0654d7ed94e5241dd19a8c" kindref="member">SYSBK_OLD</ref>]<sp/>=<sp/>(<ref refid="structstate__t" kindref="compound">state_t</ref>*)<ref refid="const_8h_1a8d20c6fabd639da26017ceba336aaee4" kindref="member">SYSBK_OLDAREA</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>new_old_areas[0][<ref refid="init_8h_1aa4478ceb212e95f83acb5efc6a4b2f96" kindref="member">SYSBK_NEW</ref>]<sp/>=<sp/>(<ref refid="structstate__t" kindref="compound">state_t</ref>*)<ref refid="const_8h_1a403cf9f89a1a4d5cee0ff2af5687670b" kindref="member">SYSBK_NEWAREA</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;i&lt;<ref refid="init_8h_1abc16f63a572f5b4de9617288fc7c9559" kindref="member">MAXCPUs</ref>;i++){</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_old_areas[i][<ref refid="init_8h_1adf0526200120de69a5faac212ae1e0c5" kindref="member">INT_OLD</ref>]<sp/>=<sp/>&amp;real_new_old_areas[i-1][<ref refid="init_8h_1adf0526200120de69a5faac212ae1e0c5" kindref="member">INT_OLD</ref>];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_old_areas[i][<ref refid="init_8h_1a1c70b67aa8a2da0db1ad44ef72a2f050" kindref="member">INT_NEW</ref>]<sp/>=<sp/>&amp;real_new_old_areas[i-1][<ref refid="init_8h_1a1c70b67aa8a2da0db1ad44ef72a2f050" kindref="member">INT_NEW</ref>];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_old_areas[i][<ref refid="init_8h_1a09276c76a19689cebfd74dd3846e9f38" kindref="member">TLB_OLD</ref>]<sp/>=<sp/>&amp;real_new_old_areas[i-1][<ref refid="init_8h_1a09276c76a19689cebfd74dd3846e9f38" kindref="member">TLB_OLD</ref>];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_old_areas[i][<ref refid="init_8h_1ac80e3cb5a610919db7a4c96d73b6c5a3" kindref="member">TLB_NEW</ref>]<sp/>=<sp/>&amp;real_new_old_areas[i-1][<ref refid="init_8h_1ac80e3cb5a610919db7a4c96d73b6c5a3" kindref="member">TLB_NEW</ref>];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_old_areas[i][<ref refid="init_8h_1a00eb3e886ed75bb0469c878c16ac3f0c" kindref="member">PGMTRAP_OLD</ref>]<sp/>=<sp/>&amp;real_new_old_areas[i-1][<ref refid="init_8h_1a00eb3e886ed75bb0469c878c16ac3f0c" kindref="member">PGMTRAP_OLD</ref>];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_old_areas[i][<ref refid="init_8h_1aa8385e9f72c50f39525b45dba68596d9" kindref="member">PGMTRAP_NEW</ref>]<sp/>=<sp/>&amp;real_new_old_areas[i-1][<ref refid="init_8h_1aa8385e9f72c50f39525b45dba68596d9" kindref="member">PGMTRAP_NEW</ref>];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_old_areas[i][<ref refid="init_8h_1a78d7439f7d0654d7ed94e5241dd19a8c" kindref="member">SYSBK_OLD</ref>]<sp/>=<sp/>&amp;real_new_old_areas[i-1][<ref refid="init_8h_1a78d7439f7d0654d7ed94e5241dd19a8c" kindref="member">SYSBK_OLD</ref>];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_old_areas[i][<ref refid="init_8h_1aa4478ceb212e95f83acb5efc6a4b2f96" kindref="member">SYSBK_NEW</ref>]<sp/>=<sp/>&amp;real_new_old_areas[i-1][<ref refid="init_8h_1aa4478ceb212e95f83acb5efc6a4b2f96" kindref="member">SYSBK_NEW</ref>];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;<ref refid="init_8h_1abc16f63a572f5b4de9617288fc7c9559" kindref="member">MAXCPUs</ref>;i++){</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initNewArea((<ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref>)<sp/><ref refid="exception_8c_1a040cab4a1a9f9ff634d8cd71735816bc" kindref="member">int_handler</ref>,<sp/>new_old_areas[i][<ref refid="init_8h_1a1c70b67aa8a2da0db1ad44ef72a2f050" kindref="member">INT_NEW</ref>],i);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initNewArea((<ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref>)<sp/><ref refid="exception_8c_1ae42e7b6fc994b2616bb067eec168a004" kindref="member">tlb_handler</ref>,<sp/>new_old_areas[i][<ref refid="init_8h_1ac80e3cb5a610919db7a4c96d73b6c5a3" kindref="member">TLB_NEW</ref>],i);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initNewArea((<ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref>)<sp/><ref refid="exception_8c_1a89545726f1e21a94df465ce505fb004d" kindref="member">pgmtrap_handler</ref>,<sp/>new_old_areas[i][<ref refid="init_8h_1aa8385e9f72c50f39525b45dba68596d9" kindref="member">PGMTRAP_NEW</ref>],i);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initNewArea((<ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref>)<sp/><ref refid="exception_8c_1a8bc55352fc8ce73231129ee8dcc35563" kindref="member">sysbk_handler</ref>,<sp/>new_old_areas[i][<ref refid="init_8h_1aa4478ceb212e95f83acb5efc6a4b2f96" kindref="member">SYSBK_NEW</ref>],i);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initCpuStates(<ref refid="structstate__t" kindref="compound">state_t</ref>*<sp/>addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstate__t" kindref="compound">state_t</ref>*<sp/>state<sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils_8c_1aa7439c3a4d37f53dcb946c7616592cf4" kindref="member">memset</ref>(state,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structstate__t" kindref="compound">state_t</ref>));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structstate__t_1ae37efb991e613c0dc476ece5ed4ffa71" kindref="member">status</ref><sp/>=<sp/><ref refid="libumps_8h_1a9ee013f04d59d001ffe5d334a11e8db0" kindref="member">getSTATUS</ref>();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;reg_sp<sp/>=<sp/><ref refid="const_8h_1aece40125a4bf69bdb1823da3d199f2f6" kindref="member">RAMTOP</ref><sp/>-<sp/>i*<ref refid="const_8h_1af9b1b2ba12857a4bf11289dac8c5462d" kindref="member">FRAME_SIZE</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;<ref refid="structstate__t_1ac0cfee10c7a13bb3749604cd15892217" kindref="member">pc_epc</ref><sp/>=<sp/>state-&gt;reg_t9<sp/>=<sp/>(<ref refid="base_8h_1a8dfc83cbb8a200048ed977af78885aa1" kindref="member">memaddr</ref>)<ref refid="scheduler_8c_1a9fa00b0be5d3c4781048861e2506eb63" kindref="member">scheduler</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initCPUs(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstate__t" kindref="compound">state_t</ref><sp/>now;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)0x10000500;i++){</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initCpuStates(&amp;now,i);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libumps_8h_1a4f1807bd72adbecb22013887627fdca6" kindref="member">INITCPU</ref>(i,&amp;now,new_old_areas[i][0]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="init_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>p1<sp/>=<sp/><ref refid="const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inizializzazione<sp/>strutture<sp/>dati<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pcb_8c_1a44e85174fc260ea2383787113059a047" kindref="member">initPcbs</ref>();<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="asl_8c_1a37f5309d6814c22605b7da62eccc0f3a" kindref="member">initASL</ref>();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>initSemaphoreASL(0);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>initPIDs();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>initSchedQueue();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>initCurrentProcs();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//initWaitClock();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>initDevStatus();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inizializzazione<sp/>per<sp/>ogni<sp/>new<sp/>area<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>initNewOldAreas();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Instanziare<sp/>il<sp/>PCB<sp/>e<sp/>lo<sp/>stato<sp/>del<sp/>processo<sp/>test*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/><ref refid="scheduler_8c_1a0e21ba9f85390e60366d1152ce12eb6e" kindref="member">allocaPcb</ref>(<ref refid="init_8h_1a39604002c6cbb68b1be5bc3e21caadd1" kindref="member">DEF_PRIORITY</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocare<sp/>PCB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>initTest(&amp;p1-&gt;<ref refid="structpcb__t_1ae1524fbfc37b7766b551477e48b3bf4d" kindref="member">p_s</ref>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Inserire<sp/>il<sp/>processo<sp/>nella<sp/>Ready<sp/>Queue*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scheduler_8c_1a36f350361c844b6f548e4e4579b87719" kindref="member">inserisciprocessoready</ref>(p1);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//myprinthex(&quot;indirizzo<sp/>PCB<sp/>test&quot;,p1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>initCPUs();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="const_8h_1a98a44c978bf3f7290f7029cef3e57cb1" kindref="member">SET_IT</ref>(<ref refid="const_8h_1a06507a339811e272f2590a094281e4a3" kindref="member">SCHED_PSEUDO_CLOCK</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scheduler_8c_1a9fa00b0be5d3c4781048861e2506eb63" kindref="member">scheduler</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Richiamo<sp/>lo<sp/>scheduler*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/phra/Desktop/progetto_so/src/init.c"/>
  </compounddef>
</doxygen>
