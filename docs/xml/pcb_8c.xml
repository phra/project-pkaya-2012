<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="pcb_8c" kind="file">
    <compoundname>pcb.c</compoundname>
    <includes refid="const_8h" local="yes">const.h</includes>
    <includes refid="u_m_p_stypes_8h" local="yes">uMPStypes.h</includes>
    <includes refid="listx_8h" local="yes">listx.h</includes>
    <includes refid="types11_8h" local="yes">types11.h</includes>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <incdepgraph>
      <node id="227">
        <label>listx.h</label>
        <link refid="listx_8h"/>
      </node>
      <node id="228">
        <label>types11.h</label>
        <link refid="types11_8h"/>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="226">
        <label>uMPStypes.h</label>
        <link refid="u_m_p_stypes_8h"/>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
      </node>
      <node id="223">
        <label>C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c</label>
        <link refid="pcb.c"/>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
      </node>
      <node id="225">
        <label>base.h</label>
        <link refid="base_8h"/>
      </node>
      <node id="229">
        <label>utils.h</label>
        <link refid="utils_8h"/>
      </node>
      <node id="224">
        <label>const.h</label>
        <link refid="const_8h"/>
        <childnode refid="225" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="pcb_8c_1a285ae64e0dea6b13f94979f1cc7c382d" prot="public" static="no">
        <name>TRANSMITTED</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="8" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1a6f6489887e08bff4887d0bc5dcf214d8" prot="public" static="no">
        <name>ACK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="9" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1a5af38e3a7bc301757e367a04a3a8a96d" prot="public" static="no">
        <name>PRINTCHR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="10" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1aa1bf756391a9960a2445236428e08068" prot="public" static="no">
        <name>CHAROFFSET</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="11" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1a937dd9f9084a17618cdebdacad7299c7" prot="public" static="no">
        <name>STATUSMASK</name>
        <initializer>0xFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="12" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1afd7c9be68e62aa06f63ba025c13ee34a" prot="public" static="no">
        <name>TERM0ADDR</name>
        <initializer>0x10000250</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="13" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1a46c3d6184a0f7fe61df840f07e3e3a2f" prot="public" static="no">
        <name>DEVREGSIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="14" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1ad1235d5ce36f7267285e82dccd428aa6" prot="public" static="no">
        <name>READY</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="15" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1a6d290d1da702b40a5947ee63700f890e" prot="public" static="no">
        <name>DEVREGLEN</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="16" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pcb_8c_1ab5be0aaddb58ffb9cb20c12530d66316" prot="public" static="no">
        <name>BUSY</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="17" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pcb_8c_1a4aff766f79d278b87192491c94425ee2" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref></type>
        <definition>struct list_head pcbfree_h</definition>
        <argsstring></argsstring>
        <name>pcbfree_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="20" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pcb_8c_1a27cb1ea9958e54c34990d835770fb6a7" prot="public" static="no" mutable="no">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref></type>
        <definition>pcb_t pcbFree_table[MAXPROC]</definition>
        <argsstring>[MAXPROC]</argsstring>
        <name>pcbFree_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="21" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pcb_8c_1a44e85174fc260ea2383787113059a047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initPcbs</definition>
        <argsstring>(void)</argsstring>
        <name>initPcbs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initPbcs(): inizializza la lista pcbFree in modo da contenere tutti gli elementi di pcbFree_table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="32" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="32" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1ab42d615bd7053b952a73dee6fd84c54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freePcb</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>freePcb</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>freePcb(puntatore a pcb_t): inserisce il processo puntato da p nella lista dei pcb liberi. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al processo </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="42" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a953a4918f234322fc93193f53d897d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* allocPcb</definition>
        <argsstring>(void)</argsstring>
        <name>allocPcb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore a <ref refid="structpcb__t" kindref="compound">pcb_t</ref>) <ref refid="pcb_8c_1a953a4918f234322fc93193f53d897d5d" kindref="member">allocPcb()</ref>: rimuove il primo elemento dalla lista dei pcb liberi e inizializza tutti i campi a NULL e lo restituisce. in caso non ci siano pcb liberi, restituisce NULL. <simplesect kind="return"><para>indirizzo del pcb allocato, NULL altrimenti </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="50" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="50" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a7d7b6160ba5bee4b501ed07afb8caa93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mkEmptyProcQ</definition>
        <argsstring>(struct list_head *head)</argsstring>
        <name>mkEmptyProcQ</name>
        <param>
          <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>mkEmptyProcQ(puntatore a list_head): inizializza la sentinella. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore alla sentinella </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="77" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a4b271dabd4c2d2897b71cccbe934bdac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emptyProcQ</definition>
        <argsstring>(struct list_head *head)</argsstring>
        <name>emptyProcQ</name>
        <param>
          <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(1 TRUE oppure 0 FALSE) emptyProcQ(puntatore alla sentinella della lista): restituisce 1 se la lista è vuota altrimenti restituisce 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore alla sentinella </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se la lista è vuota, 0 altrimenti </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="85" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a9f83539fc894253a43a7a8e22ba6c3ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertProcQ</definition>
        <argsstring>(struct list_head *head, pcb_t *p)</argsstring>
        <name>insertProcQ</name>
        <param>
          <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>insertProcQ(puntatore alla sentinella, puntatore ad un processo): inserisce il processo nella lista a cui punta la sentinella, tenendo conto della priorità dei processi. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore alla sentinella </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al processo </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="94" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="94" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a9b581f743cc1fe0dfbceecb8d529c451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* headProcQ</definition>
        <argsstring>(struct list_head *head)</argsstring>
        <name>headProcQ</name>
        <param>
          <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore al processo) headProcQ(puntatore alla sentinella):restituisce l&apos;elemento in testa della coda SENZA RIMUOVERLO. se la coda è vuota, restituisce NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore alla sentinella </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="124" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a90fa8ebc0a1c39c83e836bdf04275a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* removeProcQ</definition>
        <argsstring>(struct list_head *head)</argsstring>
        <name>removeProcQ</name>
        <param>
          <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore al processo) removeProcQ(puntatore alla sentinella): restiuisce l&apos;elemento in testa della coda RIMUOVENDOLO. se la coda è vuota, restituisce NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore alla sentinella </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>puntatore al processo rimosso </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="136" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="136" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a43c105746bbed6463dc347e023821efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* outProcQ</definition>
        <argsstring>(struct list_head *head, pcb_t *p)</argsstring>
        <name>outProcQ</name>
        <param>
          <type>struct <ref refid="structlist__head" kindref="compound">list_head</ref> *</type>
          <declname>head</declname>
        </param>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="148" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="148" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a7d6e59469f944f132a41c390b606ab08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int emptyChild</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>emptyChild</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(1 TRUE oppure 0 FALSE) emptyChild(puntatore al processo): restituisce 1 se il processo puntato da p non ha figli, altrimenti 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al processo </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se non ha figli, 0 altrimenti </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="169" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1acbb38484ab3807a24bf6513c05101a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertChild</definition>
        <argsstring>(pcb_t *prnt, pcb_t *p)</argsstring>
        <name>insertChild</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>prnt</declname>
        </param>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>insertChild(puntatore al processo, puntatore al processo): inserisce il processo p come figlio di prnt. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prnt</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al padre </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al figlio </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="178" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="178" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1a4d8a060bdeac7847a16e45ffe18d3389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* removeChild</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>removeChild</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore al processo) removeChild(puntatore al processo): restituisce il primo figlio del processo puntato da p RIMUOVENDOLO. se p non ha figli, restituisce NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al processo </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>indirizzo del figlio rimosso </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="189" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="pcb_8c_1ac842b91f7c9963383016a95ae09f903c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
        <definition>pcb_t* outChild</definition>
        <argsstring>(pcb_t *p)</argsstring>
        <name>outChild</name>
        <param>
          <type><ref refid="structpcb__t" kindref="compound">pcb_t</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(puntatore al processo) outChild(puntatore al processo):restituisce il processo puntato da p RIMUOVENDOLO dalla lista dei figli del padre. se il processo p non ha un padre, restituisce NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore al processo da rimuovere </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>puntatore al processo rimosso </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" line="202" bodyfile="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c" bodystart="202" bodyend="207"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="const_8h" kindref="compound">const.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="u_m_p_stypes_8h" kindref="compound">uMPStypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="listx_8h" kindref="compound">listx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types11_8h" kindref="compound">types11.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils_8h" kindref="compound">utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRANSMITTED<sp/>5</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ACK<sp/>1</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PRINTCHR<sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CHAROFFSET<sp/><sp/>8</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>STATUSMASK<sp/><sp/>0xFF</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TERM0ADDR<sp/><sp/><sp/>0x10000250</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEVREGSIZE<sp/>16<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>READY<sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEVREGLEN<sp/><sp/><sp/>4</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BUSY<sp/><sp/><sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref><sp/><ref refid="pcb_8c_1a4aff766f79d278b87192491c94425ee2" kindref="member">pcbfree_h</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/><ref refid="pcb_8c_1a27cb1ea9958e54c34990d835770fb6a7" kindref="member">pcbFree_table</ref>[<ref refid="const_8h_1abe4567498db286a3185a522c6dae3cbc" kindref="member">MAXPROC</ref>];</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>########################################################</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>##########<sp/><sp/>Funzioni<sp/>per<sp/>la<sp/>gestione<sp/>dei<sp/>PCB<sp/><sp/>##########</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>########################################################</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a44e85174fc260ea2383787113059a047" kindref="member">initPcbs</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;<ref refid="pcb_8c_1a4aff766f79d278b87192491c94425ee2" kindref="member">pcbfree_h</ref>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<ref refid="const_8h_1abe4567498db286a3185a522c6dae3cbc" kindref="member">MAXPROC</ref>;i++<sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add(&amp;<ref refid="pcb_8c_1a27cb1ea9958e54c34990d835770fb6a7" kindref="member">pcbFree_table</ref>[i].p_next,&amp;<ref refid="pcb_8c_1a4aff766f79d278b87192491c94425ee2" kindref="member">pcbfree_h</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1ab42d615bd7053b952a73dee6fd84c54d" kindref="member">freePcb</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>p){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add(&amp;p-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>,&amp;<ref refid="pcb_8c_1a4aff766f79d278b87192491c94425ee2" kindref="member">pcbfree_h</ref>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*<ref refid="pcb_8c_1a953a4918f234322fc93193f53d897d5d" kindref="member">allocPcb</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>pcb_return;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>l_next<sp/>=<sp/>list_next(&amp;<ref refid="pcb_8c_1a4aff766f79d278b87192491c94425ee2" kindref="member">pcbfree_h</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(list_empty(&amp;<ref refid="pcb_8c_1a4aff766f79d278b87192491c94425ee2" kindref="member">pcbfree_h</ref>))</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*cerca<sp/>il<sp/>processo<sp/>che<sp/>ha<sp/>come<sp/>list_head<sp/>l_next*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>pcb_return=<ref refid="listx_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(l_next,<ref refid="structpcb__t" kindref="compound">pcb_t</ref>,p_next);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>list_del(l_next);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*impostiamo<sp/>a<sp/>0<sp/>tutti<sp/>i<sp/>campi<sp/>di<sp/>pcb_t*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils_8c_1aa7439c3a4d37f53dcb946c7616592cf4" kindref="member">memset</ref>(pcb_return,0,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpcb__t" kindref="compound">pcb_t</ref>));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*inizializziamo<sp/>le<sp/>liste<sp/>del<sp/>processo*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;pcb_return-&gt;p_child);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;pcb_return-&gt;<ref refid="structpcb__t_1ae571e01892f17d1ccf6332d96e6c5373" kindref="member">p_sib</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>pcb_return-&gt;<ref refid="structpcb__t_1a831f803a73e91f4b1530e60bc24e92b4" kindref="member">p_semkey</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pcb_return;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>########################################################</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>##<sp/><sp/>Funzioni<sp/>per<sp/>la<sp/>gestione<sp/>delle<sp/>code<sp/>di<sp/>processi<sp/><sp/><sp/>##</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>########################################################</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a7d7b6160ba5bee4b501ed07afb8caa93" kindref="member">mkEmptyProcQ</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>head){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(head);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a4b271dabd4c2d2897b71cccbe934bdac" kindref="member">emptyProcQ</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>head){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list_empty(head);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a9f83539fc894253a43a7a8e22ba6c3ba" kindref="member">insertProcQ</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>head,<sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>item;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>iter_head;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="pcb_8c_1a4b271dabd4c2d2897b71cccbe934bdac" kindref="member">emptyProcQ</ref>(head)){</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add(&amp;p-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>,head);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="listx_8h_1a9b782fefb5ab71ce9762182e45a615e1" kindref="member">list_for_each_entry</ref>(item,head,p_next){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;<ref refid="structpcb__t_1acec9ce2df15222151ad66fcb1d74eb9f" kindref="member">priority</ref><sp/>&gt;<sp/>item-&gt;<ref refid="structpcb__t_1acec9ce2df15222151ad66fcb1d74eb9f" kindref="member">priority</ref>){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_head<sp/>=<sp/>&amp;item-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_head<sp/>=<sp/>&amp;item-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*decide<sp/>se<sp/>inserire<sp/>il<sp/>processo<sp/>prima<sp/>o<sp/>dopo<sp/>l&apos;elemento<sp/>puntato<sp/>da<sp/>iter_head*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type==0)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*in<sp/>questo<sp/>caso<sp/>nella<sp/>coda<sp/>esiste<sp/>un<sp/>processo<sp/>con<sp/>priorità<sp/>minore<sp/>del<sp/>processo<sp/>che<sp/>dobbiamo<sp/>inserire<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add_tail(&amp;p-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>,iter_head);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*in<sp/>questo<sp/>caso<sp/>invece<sp/>non<sp/>esiste<sp/>un<sp/>processo<sp/>con<sp/>priorità<sp/>minore*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add(&amp;p-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>,iter_head);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*<ref refid="pcb_8c_1a9b581f743cc1fe0dfbceecb8d529c451" kindref="member">headProcQ</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>head){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="pcb_8c_1a4b271dabd4c2d2897b71cccbe934bdac" kindref="member">emptyProcQ</ref>(head))</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>first_el<sp/>=<sp/>list_next(head);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="listx_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(first_el,<ref refid="structpcb__t" kindref="compound">pcb_t</ref>,p_next);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8c_1a90fa8ebc0a1c39c83e836bdf04275a17" kindref="member">removeProcQ</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>head){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>first_head;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="pcb_8c_1a4b271dabd4c2d2897b71cccbe934bdac" kindref="member">emptyProcQ</ref>(head))</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>first_head<sp/>=<sp/>list_next(head);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>list_del(first_head);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="listx_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(first_head,<ref refid="structpcb__t" kindref="compound">pcb_t</ref>,p_next);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="145"><highlight class="comment">(puntatore<sp/>al<sp/>processo)<sp/>outProcQ(puntatore<sp/>alla<sp/>sentinella,<sp/>puntatore<sp/>al<sp/>processo):<sp/>restiuisce<sp/>l&apos;elemento<sp/>puntato<sp/>da<sp/>p,<sp/>RIMUOVENDOLO<sp/>dalla<sp/>coda<sp/>puntata<sp/>da<sp/>head.<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="comment">se<sp/>il<sp/>processo<sp/>non<sp/>è<sp/>presente,<sp/>restituisce<sp/>NULL.</highlight></codeline>
<codeline lineno="147"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8c_1a43c105746bbed6463dc347e023821efd" kindref="member">outProcQ</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>head,<sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p){</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>item;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="listx_8h_1a9b782fefb5ab71ce9762182e45a615e1" kindref="member">list_for_each_entry</ref>(item,head,p_next){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(item==p){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;item-&gt;<ref refid="structpcb__t_1adb25d84c36e53123e815e122610fd3ab" kindref="member">p_next</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>########################################################</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>##<sp/>Funzioni<sp/>per<sp/>la<sp/>gestione<sp/>degli<sp/>alberi<sp/>di<sp/>processi<sp/><sp/>##</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/>########################################################</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="169"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1a7d6e59469f944f132a41c390b606ab08" kindref="member">emptyChild</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list_empty(&amp;p-&gt;p_child);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pcb_8c_1acbb38484ab3807a24bf6513c05101a72" kindref="member">insertChild</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*prnt,<sp/><ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*imposta<sp/>p<sp/>figlio<sp/>di<sp/>prnt*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;p-&gt;<ref refid="structpcb__t_1ae571e01892f17d1ccf6332d96e6c5373" kindref="member">p_sib</ref>,&amp;prnt-&gt;p_child);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*imposta<sp/>prnt<sp/>padre<sp/>di<sp/>p*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structpcb__t_1a4d7a714ff6400c5cc2977964fc3b0c53" kindref="member">p_parent</ref><sp/>=<sp/>prnt;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8c_1a4d8a060bdeac7847a16e45ffe18d3389" kindref="member">removeChild</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref><sp/>*p){</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist__head" kindref="compound">list_head</ref>*<sp/>first_head;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="pcb_8c_1a7d6e59469f944f132a41c390b606ab08" kindref="member">emptyChild</ref>(p))</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>first_head<sp/>=<sp/>list_next(&amp;p-&gt;p_child);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>list_del(first_head);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="listx_8h_1af8c317a42292b61c93aae91e59118a46" kindref="member">container_of</ref>(first_head,<ref refid="structpcb__t" kindref="compound">pcb_t</ref>,p_sib);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/><ref refid="pcb_8c_1ac842b91f7c9963383016a95ae09f903c" kindref="member">outChild</ref>(<ref refid="structpcb__t" kindref="compound">pcb_t</ref>*<sp/>p){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="pcb_8c_1a7d6e59469f944f132a41c390b606ab08" kindref="member">emptyChild</ref>(p-&gt;<ref refid="structpcb__t_1a4d7a714ff6400c5cc2977964fc3b0c53" kindref="member">p_parent</ref>))</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="const_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>list_del(&amp;p-&gt;<ref refid="structpcb__t_1ae571e01892f17d1ccf6332d96e6c5373" kindref="member">p_sib</ref>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/phra/Desktop/progetto_so/src/lib/pcb.c"/>
  </compounddef>
</doxygen>
